@page "/reporting"
@rendermode InteractiveServer

@using BlazorPoultryDashboard.Application.Database.SQLCe
@using System.Net.Http.Json
@using BlazorPoultryDashboard.Application.Services
@using BlazorPoultryDashboard.Domain.Enums
@using BlazorPoultryDashboard.Domain.Interfaces
@using MudBlazor

@inject IConfiguration Configuration
@inject IConfigurationRoot ConfigurationRoot
@inject ReportDataReceiver _reportDataReceiver
@inject IReportEventNotifier _reportEventNotifier
@inject IJSRuntime JSRuntime

<MyMudProviders />


@if (Reports != null && Reports.Any())
{
       <MudSwitch @bind-Checked="@_isFiveMinutesReport" UnCheckedColor="Color.Warning" Color="Color.Tertiary">@ReportTiming(_isFiveMinutesReport)</MudSwitch>

        <MudTabs Outlined="true" Position="@Position.Top" Rounded="true" Border="true" ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6">
            <MudTabPanel Text="Bird Weight KPIs">
                <MudChart ChartType="ChartType.StackedBar" ChartSeries="@GetBirdWeightSeries()" XAxisLabels="@XAxisLabels" Width="100%" Height="550px"></MudChart>
            </MudTabPanel>

            <MudTabPanel Text="Bird Rate KPIs">
            <MudChart ChartType="ChartType.StackedBar" ChartSeries="@GetBirdRateSeries()" XAxisLabels="@XAxisLabels" Width="100%" Height="550px"></MudChart>
            </MudTabPanel>

        <MudTabPanel Text="General">
            <MudChart ChartType="ChartType.Bar" ChartSeries="@Series()" XAxisLabels="@XAxisLabels" Width="100%" Height="550px"></MudChart>
        </MudTabPanel>
        <MudTabPanel Text="All">
            <MudChart ChartType="ChartType.Line" ChartSeries="@AllWeightSeries()" XAxisLabels="@XAxisLabels" Width="100%" Height="550px"></MudChart>
        </MudTabPanel>

        </MudTabs>
}
else
{
    <MudAlert Severity="Severity.Warning">No reporting data available!</MudAlert>
}

@code {

    private IEnumerable<Report>? Reports;
    private TimeSpan SelectedTimeWindow;
    private bool _isFiveMinutesReport { get; set; } = default!;
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };



    protected override async Task OnInitializedAsync()
    {
        string reportTimingResult = await GetSessionStorageValue("reporttiming");
        bool isfiveminutesreport = Convert.ToBoolean(reportTimingResult);
        _isFiveMinutesReport = isfiveminutesreport;
        _reportEventNotifier.ReportSaved += HandleReportSaved!;
        HandleReportSaved(null, null);
    }

    private string ReportTiming(bool isfiveminutesreport)
    {
        SetSessionStorageValue("reporttiming", isfiveminutesreport.ToString());
        return isfiveminutesreport ? @"5 Minutes Reporting Selected!" : @"Hourly Reporting Selected!";
    }

    // Method to set a value in sessionStorage
    private async void SetSessionStorageValue(string key, string value)
    {
        var settingsSection = ConfigurationRoot.GetSection("Reporting");
        // Update the value of a setting
        settingsSection[key] = value;
        // Commit the changes
        ConfigurationRoot.Reload();
    }

    // Method to get a value from sessionStorage
    private async Task<string> GetSessionStorageValue(string key)
    {
        return Configuration[$"Reporting:{key}"]!;
    }

    private async void HandleReportSaved(object sender, EventArgs e)
    {
        
        string reportTimingResult = await GetSessionStorageValue("reporttiming");
        bool isfiveminutesreport = Convert.ToBoolean(reportTimingResult);

        SelectedTimeWindow = isfiveminutesreport ? TimeSpan.FromMinutes(5) : TimeSpan.FromMinutes(60);
        // GET report request to DB:
        var reportsDescending = await _reportDataReceiver.GetReportsAsync(SelectedTimeWindow);
        Reports = reportsDescending.OrderByDescending(_ => _.Id);

        InvokeAsync(() => { StateHasChanged(); });
    }
   

    public List<ChartSeries> GetBirdWeightSeries()
    {
        List<ChartSeries> chartSeries = new List<ChartSeries>();

        List<double> AverageWeights = new List<double>();
        List<double> MinWeights = new List<double>();
        List<double> MaxWeights = new List<double>();
        List<double> MedianWeights = new List<double>();
        List<DateTime> CreatedDates = new List<DateTime>();

        foreach (var report in Reports)
        {
            AverageWeights.Add(report.AverageWeight);
            MinWeights.Add(report.MinWeight);
            MaxWeights.Add(report.MaxWeight);
            MedianWeights.Add(report.MedianWeight);
            CreatedDates.Add(report.CreatedAt);
        }

        // Calculate different KPIs for bird weight
        double meanWeight = AverageWeights.Any() ? AverageWeights.Average() : 0.0;
        double minWeight = MinWeights.Any() ? MinWeights.Min() : 0.0;
        double maxWeight = MaxWeights.Any() ? MaxWeights.Max() : 0.0;
        double medianWeight = MedianWeights.Any() ? Median(MedianWeights) : 0.0;

        // Create chart series for the calculated KPIs
        chartSeries.Add(new ChartSeries() { Name = "Mean Weight", Data = new double[] { meanWeight } });
        chartSeries.Add(new ChartSeries() { Name = "Min Weight", Data = new double[] { minWeight } });
        chartSeries.Add(new ChartSeries() { Name = "Max Weight", Data = new double[] { maxWeight } });
        chartSeries.Add(new ChartSeries() { Name = "Median Weight", Data = new double[] { medianWeight } });

        return chartSeries;
    }

    public List<ChartSeries> GetBirdRateSeries()
    {
        List<ChartSeries> chartSeries = new List<ChartSeries>();

        List<double> AverageWeightRates = new List<double>();
        List<double> TotalWeightChanges = new List<double>();
        List<DateTime> CreatedDates = new List<DateTime>();

        foreach (var report in Reports)
        {
            AverageWeightRates.Add(report.AverageWeightRate);
            TotalWeightChanges.Add(report.TotalWeightChange);
            CreatedDates.Add(report.CreatedAt);
        }

        // Calculate average rate of bird weight
        TimeSpan elapsedTime = DateTime.Now - Reports.Min(r => r.CreatedAt);
        double averageWeightRate = TotalWeightChanges.Any() ? TotalWeightChanges.Average() / elapsedTime.TotalMinutes : 0.0;

        // Create chart series for the calculated KPIs
        chartSeries.Add(new ChartSeries() { Name = "Average Rate of Weight Change", Data = new double[] { averageWeightRate } });

        return chartSeries;
    }

      public List<ChartSeries> Series()
    {
        List<ChartSeries> chartSeries = new List<ChartSeries>();

        List<double> AverageWeights = new List<double>();
        List<double> MeanGrades = new List<double>();
        List<double> AverageWeightRates = new List<double>();
        List<double> MinWeights = new List<double>();
        List<double> MaxWeights = new List<double>();
        List<double> TotalWeightChanges = new List<double>();
        List<double> MedianWeights = new List<double>();
        List<DateTime> CreatedDates = new List<DateTime>();

        foreach (var report in Reports)
        {
            AverageWeights.Add(report.AverageWeight);
            MeanGrades.Add(report.MeanGrade);
            AverageWeightRates.Add(report.AverageWeightRate);
            MinWeights.Add(report.MinWeight);
            MaxWeights.Add(report.MaxWeight);
            TotalWeightChanges.Add(report.TotalWeightChange);
            MedianWeights.Add(report.MedianWeight);
            CreatedDates.Add(report.CreatedAt);
        }

        // Calculate the average value of AverageWeights list
        double averageAverageWeight = AverageWeights.Any() ? AverageWeights.Average() : 0.0;

        // Calculate the average value of averageAverageWeight list
        double meanGrades = MeanGrades.Any() ? MeanGrades.Average() : 0.0;

        // Calculate the average value of AverageWeightRates list
        double averageWeightRates = AverageWeightRates.Any() ? AverageWeightRates.Average() : 0.0;

        // Calculate the average value of MinWeights list
        double minWeights = MinWeights.Any() ? MinWeights.Average() : 0.0;

        // Calculate the average value of MaxWeights list
        double maxWeights = MaxWeights.Any() ? MaxWeights.Average() : 0.0;

        // Calculate the average value of TotalWeightChanges list
        double totalWeightChanges = TotalWeightChanges.Any() ? TotalWeightChanges.Average() : 0.0;

        // Calculate the average value of MedianWeights list
        double medianWeights = MedianWeights.Any() ? MedianWeights.Average() : 0.0;


        chartSeries.Add(new ChartSeries() { Name = "Average Weight", Data = new double[] { averageAverageWeight } });
        chartSeries.Add(new ChartSeries() { Name = "Mean Grade", Data = new double[] { meanGrades } });
        chartSeries.Add(new ChartSeries() { Name = "Average Rate of Weight Change", Data = new double[] { averageWeightRates } });
        chartSeries.Add(new ChartSeries() { Name = "Min Weight", Data = new double[] { minWeights } });
        chartSeries.Add(new ChartSeries() { Name = "Max Weight", Data = new double[] { maxWeights } });
        chartSeries.Add(new ChartSeries() { Name = "Total Weight Change", Data = new double[] { totalWeightChanges } });
        chartSeries.Add(new ChartSeries() { Name = "Median Weight", Data = new double[] { medianWeights } });
        chartSeries.Add(new ChartSeries() { Name = "Mean Grade", Data = MeanGrades.ToArray() });

        string[] dateStrings = CreatedDates.Select(dt => dt.ToString("HH:mm")).ToArray(); ;
        XAxisLabels = dateStrings;

        return chartSeries;
    }

    public List<ChartSeries> AllWeightSeries()
    {
        List<ChartSeries> chartSeries = new List<ChartSeries>();

        List<double> AverageWeights = new List<double>();
        List<double> MeanGrades = new List<double>();
        List<double> AverageWeightRates = new List<double>();
        List<double> MinWeights = new List<double>();
        List<double> MaxWeights = new List<double>();
        List<double> TotalWeightChanges = new List<double>();
        List<double> MedianWeights = new List<double>();
        List<DateTime> CreatedDates = new List<DateTime>();

        foreach (var report in Reports)
        {
            AverageWeights.Add(report.AverageWeight);
            AverageWeightRates.Add(report.AverageWeightRate);
            MinWeights.Add(report.MinWeight);
            MaxWeights.Add(report.MaxWeight);
            TotalWeightChanges.Add(report.TotalWeightChange);
            MedianWeights.Add(report.MedianWeight);
            CreatedDates.Add(report.CreatedAt);
        }


        chartSeries.Add(new ChartSeries() { Name = "Average Weight", Data = AverageWeights.ToArray() });
        chartSeries.Add(new ChartSeries() { Name = "Average Rate of Weight Change", Data = AverageWeightRates.ToArray() });
        chartSeries.Add(new ChartSeries() { Name = "Min Weight", Data = MinWeights.ToArray() });
        chartSeries.Add(new ChartSeries() { Name = "Max Weight", Data = MaxWeights.ToArray() });
        chartSeries.Add(new ChartSeries() { Name = "Total Weight Change", Data = TotalWeightChanges.ToArray() });
        chartSeries.Add(new ChartSeries() { Name = "Median Weight", Data = MedianWeights.ToArray() });
        var hourGroups = CreatedDates.GroupBy(dt => new { dt.Hour, dt.Minute });
        string[] dateStrings = hourGroups.Select(group => group.First().ToString("HH:mm")).ToArray();
        XAxisLabels = dateStrings;

        return chartSeries;
    }


    public double Median(List<double> source)
    {
        // Create a copy of the list and sort it
        List<double> sortedList = source.OrderBy(x => x).ToList();

        int count = sortedList.Count;
        if (count == 0)
        {
            throw new InvalidOperationException("The list is empty.");
        }

        int mid = count / 2;
        double median = count % 2 != 0 ? sortedList[mid] : (sortedList[mid - 1] + sortedList[mid]) / 2.0;

        return median;
    }

    private void Dispose()
    {
        _reportEventNotifier.ReportSaved -= HandleReportSaved!;
    }

}
